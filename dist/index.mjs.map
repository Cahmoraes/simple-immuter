{"version":3,"sources":["../src/si/index.ts"],"sourcesContent":["export default (() => {\n  const errors = new Map([\n    [1, 'This object has been frozen and should not be mutated'],\n    [2, 'baseState and producer are incompatibles'],\n    [3, `Cannot merge these types, because they are different types`],\n  ])\n\n  const die = (errorNumber: number) => () =>\n    console.log(errors.get(errorNumber))\n\n  const pipe =\n    (...fns: any[]) =>\n    (value: any) =>\n      fns.reduce((acc, fn) => fn(acc), value)\n\n  const flat = (element: any, depth = Infinity) => {\n    return depth > 0\n      ? element.reduce(\n          (flatArray: any[], array: any[]) =>\n            flatArray.concat(flat(array, --depth)),\n          [],\n        )\n      : element\n  }\n\n  const createObjectFromEntries = (entries: any[]) =>\n    Object.fromEntries(entries)\n\n  const getKeysAndSymbolsFromObject = (object: object) =>\n    Reflect.ownKeys(object)\n\n  const immuterSet = (setToImmuter: any): Set<any> => {\n    setToImmuter.add = die(1)\n    setToImmuter.delete = die(1)\n    setToImmuter.clear = die(1)\n    return setToImmuter\n  }\n\n  const immuterMap = (mapToImmuter: any) => {\n    mapToImmuter.set = die(1)\n    mapToImmuter.delete = die(1)\n    mapToImmuter.clear = die(1)\n    return mapToImmuter\n  }\n\n  const setPrototypeOf = (prototype: object) => (object: object) =>\n    Object.setPrototypeOf(object, prototype)\n\n  const getPrototypeOf = <T>(object: T) => Object.getPrototypeOf(object)\n\n  const typeCheck = (elementToCheck: unknown) => {\n    const stringType = Reflect.apply(\n      Object.prototype.toString,\n      elementToCheck,\n      [],\n    )\n    return stringType\n      .substring(stringType.indexOf(' ') + 1, stringType.indexOf(']'))\n      .toLowerCase()\n  }\n\n  const isArray = <T>(state: unknown): state is Array<T> =>\n    typeCheck(state) === 'array'\n\n  const isObject = <T>(state: unknown): state is T =>\n    typeCheck(state) === 'object'\n\n  const isFunction = (state: unknown): state is (...props: unknown[]) => any =>\n    typeCheck(state) === 'function'\n\n  const isPromise = <T>(state: unknown): state is Promise<T> =>\n    typeCheck(state) === 'promise'\n\n  const isUndefined = (state: unknown): state is undefined =>\n    typeCheck(state) === 'undefined'\n\n  const arrayEveryArray = <T>(states: T[]): states is T[] =>\n    states.every(isArray)\n\n  const arrayEveryObject = <T>(states: T[]): states is T[] =>\n    states.every(isObject)\n\n  const freeze = <T>(object: T) => Object.freeze(object)\n\n  const freezeDeep = (elementToFreeze: any): any => {\n    switch (typeCheck(elementToFreeze)) {\n      case 'object':\n        return pipe(\n          createObjectFromEntries,\n          setPrototypeOf(getPrototypeOf(elementToFreeze)),\n          freeze,\n        )(\n          getKeysAndSymbolsFromObject(elementToFreeze).map((key) => [\n            key,\n            freezeDeep(elementToFreeze[key]),\n          ]),\n        )\n      case 'array':\n        return freeze(elementToFreeze.map(freezeDeep))\n      case 'set':\n        return immuterSet(elementToFreeze)\n      case 'map': {\n        const freezedMap = new Map()\n        elementToFreeze.forEach((value: unknown, key: unknown) => {\n          freezedMap.set(key, freezeDeep(value))\n        })\n        return immuterMap(freezedMap)\n      }\n      default:\n        return elementToFreeze\n    }\n  }\n\n  const producePromise = async (baseState: Promise<any>, producer: any) => {\n    try {\n      const resolvedState = await baseState\n      if (isUndefined(producer)) {\n        return freezeDeep(resolvedState)\n      }\n\n      if (isFunction(producer)) {\n        producer(resolvedState)\n        return freezeDeep(resolvedState)\n      }\n    } catch (error: any) {\n      return new Error(error)\n    }\n  }\n\n  type BaseStateType<T> = T | Promise<T>\n\n  type ProducerType<T> = (draft: T) => void\n\n  type ProduceProps = <T>(\n    baseState: BaseStateType<T>,\n    producer?: ProducerType<T>,\n  ) => any\n\n  const produce: ProduceProps = <T>(\n    baseState: BaseStateType<T>,\n    producer?: ProducerType<T>,\n  ) => {\n    if (isPromise(baseState)) {\n      return producePromise(baseState, producer)\n    }\n\n    const clonedBaseState = cloneDeep(baseState)\n\n    if (isUndefined(producer)) {\n      return freezeDeep(clonedBaseState)\n    }\n\n    if (isFunction(producer)) {\n      producer(clonedBaseState)\n      return freezeDeep(clonedBaseState)\n    }\n\n    throw new Error(errors.get(3))\n  }\n\n  const cloneArray = (elementToClone: unknown[]): unknown[] =>\n    elementToClone.map(cloneDeep)\n\n  const cloneObject = <T extends { [hey: string | symbol]: any }>(\n    elementToClone: T,\n  ): T => {\n    const prototype = Object.getPrototypeOf(elementToClone)\n    return pipe(\n      createObjectFromEntries,\n      setPrototypeOf(prototype),\n    )(\n      getKeysAndSymbolsFromObject(elementToClone).map((key) => [\n        key,\n        cloneDeep(elementToClone[key]),\n      ]),\n    )\n  }\n\n  const cloneMap = <K, V>(elementToClone: Map<K, V>) => {\n    const clonedMap = new Map()\n    elementToClone.forEach((value, key) => {\n      clonedMap.set(key, cloneDeep(value))\n    })\n    return clonedMap\n  }\n\n  const cloneSet = <T>(elementToClone: Set<T>): Set<unknown> => {\n    const clonedSet = new Set()\n    elementToClone.forEach((value) => clonedSet.add(cloneDeep(value)))\n    return clonedSet\n  }\n\n  const cloneDeep = (element: any): any => {\n    switch (typeCheck(element)) {\n      case 'object':\n        return cloneObject(element)\n      case 'array':\n        return cloneArray(element)\n      case 'map':\n        return cloneMap(element)\n      case 'set':\n        return cloneSet(element)\n      default:\n        return element\n    }\n  }\n\n  type MergeProps = <T, K extends object[]>(\n    baseState: BaseStateType<T>,\n    ...states: K\n  ) => T & K\n\n  const merge: MergeProps = (baseState, ...states) => {\n    const clonedBaseState = cloneDeep(baseState)\n\n    if (isArray(clonedBaseState) && arrayEveryArray(states)) {\n      return freezeDeep([...clonedBaseState, ...flat(states, 1)])\n    }\n\n    if (isObject(baseState) && arrayEveryObject(states)) {\n      return freezeDeep(Object.assign(clonedBaseState, ...states))\n    }\n\n    throw new Error(errors.get(3))\n  }\n\n  return {\n    produce,\n    merge,\n  }\n})()\n"],"mappings":"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","names":["si_default","errors","die","errorNumber","pipe","fns","value","acc","fn","flat","element","depth","flatArray","array","createObjectFromEntries","entries","getKeysAndSymbolsFromObject","object","immuterSet","setToImmuter","immuterMap","mapToImmuter","setPrototypeOf","prototype","getPrototypeOf","typeCheck","elementToCheck","stringType","isArray","state","isObject","isFunction","isPromise","isUndefined","arrayEveryArray","states","arrayEveryObject","freeze","freezeDeep","elementToFreeze","key","freezedMap","producePromise","baseState","producer","resolvedState","error","produce","clonedBaseState","cloneDeep","cloneArray","elementToClone","cloneObject","cloneMap","clonedMap","cloneSet","clonedSet"]}