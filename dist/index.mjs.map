{"version":3,"sources":["../src/si/index.ts"],"sourcesContent":["export default (() => {\n  const errors = new Map([\n    [1, 'This object has been frozen and should not be mutated'],\n    [2, 'baseState and producer are incompatibles'],\n    [3, `Cannot merge these types, because they are different types`],\n  ])\n\n  const die = (errorNumber: number) => () =>\n    console.log(errors.get(errorNumber))\n\n  const immuterSet = (setToImmuter: any): Readonly<Set<unknown>> => {\n    setToImmuter.add = die(1)\n    setToImmuter.delete = die(1)\n    setToImmuter.clear = die(1)\n    return freeze(setToImmuter)\n  }\n\n  const immuterMap = (mapToImmuter: any): Readonly<Map<unknown, unknown>> => {\n    mapToImmuter.set = die(1)\n    mapToImmuter.delete = die(1)\n    mapToImmuter.clear = die(1)\n    return freeze(mapToImmuter)\n  }\n\n  const typeCheck = (elementToCheck: unknown) => {\n    const stringType = Reflect.apply(\n      Object.prototype.toString,\n      elementToCheck,\n      [],\n    )\n    return stringType\n      .substring(stringType.indexOf(' ') + 1, stringType.indexOf(']'))\n      .toLowerCase()\n  }\n\n  const isFunction = (state: unknown): state is (...props: unknown[]) => any =>\n    typeCheck(state) === 'function'\n\n  const isUndefined = (state: unknown): state is undefined =>\n    typeCheck(state) === 'undefined'\n\n  const freeze = <T>(object: T) => Object.freeze(object)\n\n  const freezeDeep = <T extends CloneType>(elementToFreeze: T): Readonly<T> => {\n    switch (typeCheck(elementToFreeze)) {\n      case 'object':\n        return freeze(createClone(elementToFreeze, freezeDeep))\n      case 'array':\n        return freeze((elementToFreeze as any).map(freezeDeep))\n      case 'set':\n        return immuterSet(elementToFreeze as any) as Readonly<T>\n      case 'map': {\n        const freezedMap = new Map()\n        ;(elementToFreeze as any[]).forEach((value: unknown, key: unknown) => {\n          freezedMap.set(key, freezeDeep(value as any))\n        })\n        return immuterMap(freezedMap) as Readonly<T>\n      }\n      default:\n        return elementToFreeze\n    }\n  }\n\n  type CloneType = object | Map<unknown, unknown> | Set<unknown> | unknown[]\n  type BaseStateType<T> = DraftState<T>\n  type CombinedType = Record<string, unknown>\n  type DraftState<T> = T & { [key: string]: any }\n  type DraftResult<T> = DraftState<T> | void\n  type ProducerType<T> = (draftState: DraftState<T>) => DraftResult<T>\n  type ReturnProduce<\n    T,\n    K extends ProducerType<T> | undefined,\n  > = K extends ProducerType<T> ? T & CombinedType : Readonly<T>\n\n  function produce<T extends CloneType>(\n    baseState: BaseStateType<T>,\n  ): Readonly<T>\n  function produce<T extends CloneType>(\n    baseState: BaseStateType<T>,\n    producer: ProducerType<T>,\n  ): ReturnProduce<Readonly<T>, typeof producer>\n  function produce<T extends CloneType>(\n    baseState: BaseStateType<T>,\n    producer?: ProducerType<T>,\n  ): ReturnProduce<Readonly<T>, typeof producer> {\n    const clonedBaseState = cloneDeep(baseState)\n\n    if (isUndefined(producer)) {\n      return freezeDeep(clonedBaseState)\n    }\n\n    if (isFunction(producer)) {\n      producer(clonedBaseState)\n      return freezeDeep(clonedBaseState)\n    }\n\n    throw new Error(errors.get(3))\n  }\n\n  const createClone = (\n    anObject: object,\n    strategy: (...args: any) => unknown,\n  ) => {\n    const descriptors = Object.getOwnPropertyDescriptors(anObject)\n    const cloneObj = Object.create(Object.getPrototypeOf(anObject), descriptors)\n\n    for (const descriptor of Reflect.ownKeys(descriptors)) {\n      if (!isEligible(descriptor)) continue\n      cloneObj[descriptor] = strategy(Reflect.get(anObject, descriptor))\n    }\n\n    return cloneObj\n\n    function isEligible(descriptor: string | symbol) {\n      return (\n        descriptors[String(descriptor)] &&\n        Reflect.has(descriptors[String(descriptor)], 'value')\n      )\n    }\n  }\n\n  const cloneArray = <T extends any[]>(elementToClone: T) =>\n    elementToClone.map(cloneDeep)\n\n  const cloneObject = <T extends { [key: string | symbol]: any }>(\n    elementToClone: T,\n  ): T => {\n    return createClone(elementToClone, cloneDeep)\n  }\n\n  const cloneMap = <K, V extends CloneType>(elementToClone: Map<K, V>) => {\n    const clonedMap = new Map()\n    elementToClone.forEach((value, key) => {\n      clonedMap.set(key, cloneDeep(value))\n    })\n    return clonedMap\n  }\n\n  const cloneSet = <T extends CloneType>(\n    elementToClone: Set<T>,\n  ): Set<unknown> => {\n    const clonedSet = new Set()\n    elementToClone.forEach((value) => clonedSet.add(cloneDeep(value)))\n    return clonedSet\n  }\n\n  const cloneDeep = <T extends CloneType>(element: T): T => {\n    switch (typeCheck(element)) {\n      case 'object':\n        return cloneObject(element)\n      case 'array':\n        return cloneArray(element as any[]) as T\n      case 'map':\n        return cloneMap(element as Map<any, any>) as T\n      case 'set':\n        return cloneSet(element as Set<any>) as T\n      default:\n        return element\n    }\n  }\n\n  return {\n    produce,\n    cloneDeep,\n    freezeDeep,\n  }\n})()\n"],"mappings":"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","names":["si_default","errors","die","errorNumber","immuterSet","setToImmuter","freeze","immuterMap","mapToImmuter","typeCheck","elementToCheck","stringType","isFunction","state","isUndefined","object","freezeDeep","elementToFreeze","createClone","freezedMap","value","key","produce","baseState","producer","clonedBaseState","cloneDeep","anObject","strategy","descriptors","cloneObj","descriptor","isEligible","cloneArray","elementToClone","cloneObject","cloneMap","clonedMap","cloneSet","clonedSet","element"]}