{"version":3,"sources":["../src/si/index.ts"],"sourcesContent":["export default (() => {\n  const errors = new Map([\n    [1, 'This object has been frozen and should not be mutated'],\n    [2, 'baseState and producer are incompatibles'],\n    [3, `Cannot merge these types, because they are different types`],\n  ])\n\n  const die = (errorNumber: number) => () =>\n    console.log(errors.get(errorNumber))\n\n  const pipe =\n    (...fns: any[]) =>\n    (value: any) =>\n      fns.reduce((acc, fn) => fn(acc), value)\n\n  const flat = (element: any, depth = Infinity) => {\n    if (typeCheck(element) !== 'array') return element\n    return depth > 0\n      ? element.reduce(\n          (flatArray: any[], array: any[]) =>\n            flatArray.concat(flat(array, --depth)),\n          [],\n        )\n      : element\n  }\n\n  const createObjectFromEntries = (entries: any[]) =>\n    Object.fromEntries(entries)\n\n  const getKeysAndSymbolsFromObject = (object: object) =>\n    Reflect.ownKeys(object)\n\n  const immuterSet = (setToImmuter: any): Set<any> => {\n    setToImmuter.add = die(1)\n    setToImmuter.delete = die(1)\n    setToImmuter.clear = die(1)\n    return setToImmuter\n  }\n\n  const immuterMap = (mapToImmuter: any) => {\n    mapToImmuter.set = die(1)\n    mapToImmuter.delete = die(1)\n    mapToImmuter.clear = die(1)\n    return mapToImmuter\n  }\n\n  const setPrototypeOf = (prototype: object) => (object: object) =>\n    Object.setPrototypeOf(object, prototype)\n\n  const getPrototypeOf = <T>(object: T) => Object.getPrototypeOf(object)\n\n  const typeCheck = (elementToCheck: unknown) => {\n    const stringType = Reflect.apply(\n      Object.prototype.toString,\n      elementToCheck,\n      [],\n    )\n    return stringType\n      .substring(stringType.indexOf(' ') + 1, stringType.indexOf(']'))\n      .toLowerCase()\n  }\n\n  const isArray = <T>(state: unknown): state is Array<T> =>\n    typeCheck(state) === 'array'\n\n  const isObject = <T>(state: unknown): state is T =>\n    typeCheck(state) === 'object'\n\n  const isFunction = (state: unknown): state is (...props: unknown[]) => any =>\n    typeCheck(state) === 'function'\n\n  const isPromise = <T>(state: unknown): state is Promise<T> =>\n    typeCheck(state) === 'promise'\n\n  const isUndefined = (state: unknown): state is undefined =>\n    typeCheck(state) === 'undefined'\n\n  const arrayEveryArray = <T>(states: T[]): states is T[] =>\n    states.every(isArray)\n\n  const arrayEveryObject = <T>(states: T[]): states is T[] =>\n    states.every(isObject)\n\n  const areAllSameType =\n    <T, K>(type: T) =>\n    (...objs: K[]): boolean =>\n      objs.every((obj) => typeCheck(obj) === type)\n\n  const areAllObjects = areAllSameType('object')\n\n  const areAllArrays = areAllSameType('array')\n\n  const freeze = <T>(object: T) => Object.freeze(object)\n\n  const mergeAllObjectsOrArrays = (\n    clonedBaseState: any,\n    producer: any,\n    states: any[],\n  ) => {\n    if (areAllObjects(clonedBaseState, producer) && arrayEveryObject(states)) {\n      return deepFreeze(Object.assign(clonedBaseState, producer, ...states))\n    }\n\n    if (areAllArrays(clonedBaseState, producer) && arrayEveryArray(states)) {\n      return deepFreeze([...clonedBaseState, ...producer, ...flat(states, 1)])\n    }\n\n    throw new Error(errors.get(3))\n  }\n\n  const deepFreeze = <T extends CloneType>(elementToFreeze: T): T => {\n    switch (typeCheck(elementToFreeze)) {\n      case 'object':\n        return pipe(\n          createObjectFromEntries,\n          setPrototypeOf(getPrototypeOf(elementToFreeze)),\n          freeze,\n        )(\n          getKeysAndSymbolsFromObject(elementToFreeze).map((key) => [\n            key,\n            deepFreeze((elementToFreeze as any)[key]),\n          ]),\n        )\n      case 'array':\n        return freeze((elementToFreeze as any).map(deepFreeze))\n      case 'set':\n        return immuterSet(elementToFreeze as any) as T\n      case 'map': {\n        const freezedMap = new Map()\n        ;(elementToFreeze as any[]).forEach((value: unknown, key: unknown) => {\n          freezedMap.set(key, deepFreeze(value as any))\n        })\n        return immuterMap(freezedMap)\n      }\n      default:\n        return elementToFreeze\n    }\n  }\n\n  const producePromise = async (baseState: Promise<any>, producer: any) => {\n    try {\n      const resolvedState = await baseState\n      if (isUndefined(producer)) {\n        return deepFreeze(resolvedState)\n      }\n\n      if (isFunction(producer)) {\n        producer(resolvedState)\n        return deepFreeze(resolvedState)\n      }\n    } catch (error: any) {\n      return new Error(error)\n    }\n  }\n\n  type BaseStateType<T> = T | Promise<T>\n\n  type DraftState<T> = T & { [key: string]: any }\n\n  type ProducerType<T> = ((draftState: DraftState<T>) => any) | object\n\n  type ReturnProduce<T, K extends ProducerType<T> | undefined> = K extends (\n    args: any,\n  ) => any\n    ? T & ReturnType<K>\n    : T\n\n  type ProduceProps = <T extends CloneType>(\n    baseState: BaseStateType<T>,\n    producer?: ProducerType<T>,\n    ...states: any[]\n  ) => ReturnProduce<T, typeof producer>\n\n  const produce: ProduceProps = <T extends CloneType>(\n    baseState: BaseStateType<T>,\n    producer?: ProducerType<T>,\n    ...states: any[]\n  ) => {\n    if (isPromise(baseState)) {\n      return producePromise(baseState, producer)\n    }\n\n    const clonedBaseState = deepClone(baseState)\n\n    if (isUndefined(producer)) {\n      return deepFreeze(clonedBaseState)\n    }\n\n    if (isFunction(producer)) {\n      producer(clonedBaseState)\n      return deepFreeze(clonedBaseState)\n    }\n\n    if (states.length > 0) {\n      return mergeAllObjectsOrArrays(clonedBaseState, producer, states)\n    }\n\n    if (areAllObjects(clonedBaseState, producer)) {\n      return deepFreeze(Object.assign(clonedBaseState, producer))\n    }\n\n    if (areAllArrays(clonedBaseState, producer)) {\n      if (Array.isArray(producer) && Array.isArray(clonedBaseState)) {\n        return deepFreeze([...clonedBaseState, ...producer])\n      }\n    }\n\n    throw new Error(errors.get(3))\n  }\n\n  const cloneArray = <T extends any[]>(elementToClone: T) =>\n    elementToClone.map(deepClone)\n\n  const cloneObject = <T extends { [hey: string | symbol]: any }>(\n    elementToClone: T,\n  ): T => {\n    const prototype = Object.getPrototypeOf(elementToClone)\n    return pipe(\n      createObjectFromEntries,\n      setPrototypeOf(prototype),\n    )(\n      getKeysAndSymbolsFromObject(elementToClone).map((key) => [\n        key,\n        deepClone(elementToClone[key]),\n      ]),\n    )\n  }\n\n  const cloneMap = <K, V extends CloneType>(elementToClone: Map<K, V>) => {\n    const clonedMap = new Map()\n    elementToClone.forEach((value, key) => {\n      clonedMap.set(key, deepClone(value))\n    })\n    return clonedMap\n  }\n\n  const cloneSet = <T extends CloneType>(\n    elementToClone: Set<T>,\n  ): Set<unknown> => {\n    const clonedSet = new Set()\n    elementToClone.forEach((value) => clonedSet.add(deepClone(value)))\n    return clonedSet\n  }\n\n  type CloneType = object | Map<any, any> | Set<any> | any[]\n\n  const deepClone = <T extends CloneType>(element: T): T => {\n    switch (typeCheck(element)) {\n      case 'object':\n        return cloneObject(element)\n      case 'array':\n        return cloneArray(element as any[]) as T\n      case 'map':\n        return cloneMap(element as Map<any, any>) as T\n      case 'set':\n        return cloneSet(element as Set<any>) as T\n      default:\n        return element\n    }\n  }\n\n  return {\n    produce,\n    deepClone,\n    deepFreeze,\n  }\n})()\n"],"mappings":"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","names":["si_default","errors","die","errorNumber","pipe","fns","value","acc","fn","flat","element","depth","typeCheck","flatArray","array","createObjectFromEntries","entries","getKeysAndSymbolsFromObject","object","immuterSet","setToImmuter","immuterMap","mapToImmuter","setPrototypeOf","prototype","getPrototypeOf","elementToCheck","stringType","isArray","state","isObject","isFunction","isPromise","isUndefined","arrayEveryArray","states","arrayEveryObject","areAllSameType","type","objs","obj","areAllObjects","areAllArrays","freeze","mergeAllObjectsOrArrays","clonedBaseState","producer","deepFreeze","elementToFreeze","key","freezedMap","producePromise","baseState","resolvedState","error","produce","deepClone","cloneArray","elementToClone","cloneObject","cloneMap","clonedMap","cloneSet","clonedSet"]}